<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onlyhiphop的博客</title>
  
  <subtitle>Keep going!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-27T05:54:55.049Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>onlyhiphop</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA下Maven多模块开发</title>
    <link href="http://yoursite.com/2019/06/11/IDEA%E4%B8%8BMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2019/06/11/IDEA下Maven多模块开发/</id>
    <published>2019-06-11T14:45:24.000Z</published>
    <updated>2019-06-27T05:54:55.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA下Maven多模块开发"><a href="#IDEA下Maven多模块开发" class="headerlink" title="IDEA下Maven多模块开发"></a>IDEA下Maven多模块开发</h2><p>本教程将介绍如何使用IDEA进行Maven多模块工程开发。</p><ul><li><p><a href="#1">一、使用IDEA搭建Maven多模块工程</a></p></li><li><p><a href="#2">二、Maven中继承和聚合的关系</a></p></li><li><p><a href="#3">三、Maven的三种工程pom、jar、war的区别</a></p></li><li><p><a href="#4">四、在IDEA中创建pom，jar，war项目</a></p></li><li><p><a href="#5">五、Maven的三种工程实例</a></p></li></ul><hr><h4 id="1">一、使用IDEA搭建Maven多模块工程</h4><ol><li><p>首先，我们先来创建一个新的工作空间。 <br><br> File -&gt; New-Project -&gt; Empty Project <br><br> 点击Next，进行下一步</p></li><li><p>Project location：点击选择一个空文件夹，作为工作空间 <br><br> <font color="red" size="7">注意：路径不要有中文</font> <br><br> 点击Finish,进行下一步</p></li><li><p>现在工程打开的其实就是我们刚才创建的工作空间。</p></li><li><p>现在我们开始创建父工程.</p><p> File -&gt; Module  -&gt; Maven -&gt; Next <br><br> <strong>选择</strong> <br><br> <img src="/uploads/IDEA%E4%B8%8BMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/1.png" alt="maven"></p><p> 直接点击Next</p></li><li><p>创建子工程pojo(打包方式为Jar) <br><br> File -&gt; Module  -&gt; Maven -&gt; Next <br><br> <strong>选择</strong> <br><br> <img src="/uploads/IDEA%E4%B8%8BMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/2.png" alt="maven"></p></li><li><p>选择父工程，填写GroupId和ArtifactId和版本信息 <br><br> <img src="/uploads/IDEA%E4%B8%8BMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/3.png" alt="maven"></p></li><li><p>现在我们能看到common.pom中已经继承了parent工程而parent工程中也聚合和common。 <br><br> <img src="/uploads/IDEA%E4%B8%8BMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/4.png" alt="maven"><br> <img src="/uploads/IDEA%E4%B8%8BMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/5.png" alt="maven"></p></li></ol><h4 id="2">二、Maven中继承和聚合的关系</h4><p>  <em>两者的目的是不一样的，聚合的目的是能够快速的构建项目，继承的目的是减少重复配置。</em></p><p><strong>1. 聚合</strong><br><br>定义一个聚合模块，然后在pom文件中添加&lt;module&gt;&lt;/module&gt;标签，其中的内容是模块相对于当前模块的路径。那么在构建聚合模块的时候，在&lt;module&gt;中定义的模块也会跟着构建，不用逐个构建，因此加快了构建速度。</p><p><strong>2. 继承</strong><br><br>除了定义一个父模块，在父模块的pom文件中添加&lt;module&gt;标签，还要在子模块pom文件中添加&lt;parent&gt;标签，指向父模块。指向之后，那么在父模块中定义的插件和依赖都可以被子模块继承，就不用再子模块pom文件中重复配置了（减少了重复配置）。<br><br><font color="red">注：无论是聚合还是继承，父模块的pom文件中的&lt;packageing&gt;的内容都是pom，（这是规定）。如果不写的话，默认的都是jar。</font></p><p><strong>3. 实际应用</strong><br><br>还有一个问题就是，在父模块定义了很多依赖，但是某一个模块并没有全部用到，那么子模块还是会全部继承过来。比较浪费。<br>所以可以使用依赖管理标签&lt;dependencyManagement&gt;<br>在父模块的pom文件中的&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;定义了所有需要依赖的jar包，但是这样子模块并不会引入这些jar包。子模块中需要哪些jar包就在自身pom文件的&lt;dependency&gt;标签中引入就可以了，因为父模块的pom文件中已经定义过了，子模块的pom文件只需定义出&lt;groupId&gt;和&lt;artifactId&gt;就可以了。</p><h4 id="3">三、Maven的三种工程pom、jar、war的区别</h4><pre><code>1.pom工程：用在父级工程或聚合工程中。用来做jar包的版本控制。- 打出来可以作为其他项目的maven依赖，在工程A中添加工程B的pom，A就可以使用B中的类。2.war工程：将会打包成war，发布在服务器上的工程。如网站或服务。3.jar工程：将会打包成jar用作jar包使用。</code></pre><p><font color="red">补充一下</font>，jdk9 后还可以打包 jmod（Java 模块化），厉害的是这个通过 jlink 命令，可以直接将 jmod 打包为对应环境的可执行的程序，告别了让用户安装 jdk 的步骤，现在也有对应的 maven 插件了</p><h4 id="4">四、在IDEA中创建pom，jar，war项目</h4><ol><li>创建java jar、pom项目时创建maven-archetype-quickstart</li><li>创建java war项目时创建maven-archetype-webapp</li></ol><p><img src="/uploads/IDEA%E4%B8%8BMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/6.png" alt="maven"></p><h4 id="5">五、Maven的三种工程实例</h4><ul><li>以宜立方商城为例</li></ul><p><img src="/uploads/IDEA%E4%B8%8BMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/7.png" alt="maven"></p><p><strong>1. pom工程</strong><br><br>    <strong>1.1 Tmallparent</strong> <br><br>      整个项目的父工程，它是一个pom工程。用来做整个项目的版本控制，也就是项目中所有要使用到的jar包的版本都集中由父工程管理。这样你在写其他工程pom文件中maven依赖时就不需要写版本号了。当然所有的项目都要先继承它才行。<br><br>    <strong>1.2 Tmallmanager</strong> <br><br>      用来做聚合工程，它也是一个pom工程。创建四个model分别是manager-dao 、manager-service、<br>      manager-interface、manager-pojo<br>      manager-web 同时会自动生成4个独立的maven工程。聚合工程只是用来帮助其他模块构建的工具，本身并没有实质的内容。具体每个工程代码的编写还是在生成的工程中去写</p><pre><code>&lt;font color=&quot;red&quot;&gt;pom工程的意义:&lt;/font&gt;原本这些模块也是一个个独立的工程，现在将它们聚合到Tmallmanager中，这样我们构建项目的时候就只要构建Tmallmanager一个就行了。我们只要使用maven构建这个聚合工程taotao-manager就行了而不用去操心模块的构建，比如install时只要install taotao-manager就行。总之就是简化操作。正常的编码工作还是在对应的manager-dao 、manager-service、manager-interface、manager-pojo工程中进行的。</code></pre><p><strong>2. war工程</strong></p><p>  <strong>Tmallmanager-web</strong> <br><br>  这些工程都是要部署在服务器上的，所以要打包成war形式。这些工程有的是用户通过浏览器直接访问，有的是通过发布服务被别的工程调用。</p><p><strong>3. jar工程</strong></p><p>  <strong>Tmallcommon</strong> <br><br>   这个就是打包成jar的工程。它就是存放一些其他工程都会使用的类，工具类。我们可以在其他工程的pom文件中去引用它，和引用别的jar包没什么区别。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IDEA下Maven多模块开发&quot;&gt;&lt;a href=&quot;#IDEA下Maven多模块开发&quot; class=&quot;headerlink&quot; title=&quot;IDEA下Maven多模块开发&quot;&gt;&lt;/a&gt;IDEA下Maven多模块开发&lt;/h2&gt;&lt;p&gt;本教程将介绍如何使用IDEA进行Ma
      
    
    </summary>
    
      <category term="Maven" scheme="http://yoursite.com/categories/Maven/"/>
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>IDEA搭建Maven环境</title>
    <link href="http://yoursite.com/2019/06/10/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/06/10/IDEA搭建Maven环境/</id>
    <published>2019-06-10T15:48:46.000Z</published>
    <updated>2019-06-27T01:06:32.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA搭建Maven环境"><a href="#IDEA搭建Maven环境" class="headerlink" title="IDEA搭建Maven环境"></a>IDEA搭建Maven环境</h2><p>本教程将介绍如何使用Maven在intellijIDEA中使用等、开发语言Java。</p><ul><li><p><a href="#1">一、使用idea创建maven项目</a></p></li><li><p><a href="#2">二、在idea中配置maven环境</a></p></li><li><p><a href="#3">三、settings.xml文件与配置</a></p></li><li><p><a href="#4">四、解决maven骨架问题（提高开发速度）</a></p></li><li><p><a href="#5">五、在idea中查看maven、冲突依赖、与修改pom.xml文件</a></p></li><li><p><a href="#6">六、maven的基本命令</a></p></li></ul><hr><h4 id="1">一、用idea创建maven web项目</h4><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/maven1.png" alt="maven"></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/maven2.png" alt="maven"></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/maven3.png" alt="maven"></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/maven4.png" alt="maven"></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/maven5.png" alt="maven"></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/maven6.png" alt="maven"></p><p><strong><em>这样就完成了在idea里创建maven项目、前提已经配置环境。</em></strong></p><h4 id="2">二、在idea中配置maven环境</h4><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/2maven1.png" alt="maven"></p><p><strong>打开Setings</strong></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/2maven2.png" alt="maven"></p><p><strong>加载本地maven骨架：-DarchetypeCatalog=local</strong></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/2maven2.png" alt="maven"></p><h4 id="3">三、settings.xml文件与配置</h4><ol><li>本地仓库</li></ol><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/3maven1.png" alt="maven"></p><ol start="2"><li>maven镜像（实际开发可能会搭建私服）</li></ol><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/3maven2.png" alt="maven"></p><h4 id="4">四、解决maven骨架问题（提高开发速度）</h4><ol><li><p>骨架（以后创建就很快、解决maven创建项目的速度问题）</p><p> 命令：-DarchetypeCatalog=local（指定加载本地骨架、上面已经配置好这个命令行）<br> 自己去官网下载一个maven骨架、就是下面这个文件！</p><p>archetype-catalog.xml</p><p><a href="http://repo1.maven.org/maven2/archetype-catalog.xml" target="_blank" rel="noopener">下载地址</a></p><p><a href="http://repo1.maven.org/maven2/archetype-catalog.xml/" target="_blank" rel="noopener">http://repo1.maven.org/maven2/archetype-catalog.xml/</a></p><p> Windows下：<br> 1.cmd<br> 2.start powershell<br> $client = new-object System.Net.WebClient<br> $client.DownloadFile(‘下载地址1’,’存储位置\文件名1.后缀’)</p></li><li><p>本地仓库地址</p><p> 本地：我们应该放在本地仓库的根路径下</p><p> 中央仓库：不设置、中央仓库下载、很慢很慢</p><p> 下载后放到哪里呢，这里与本地仓库的位置有关，假如本地仓库是maven默认的，并没有修改 那么就需要放到 C:\Users\del-berlin.m2\repository\org\apache\maven\archetype\archetype-catalog\2.4\下  ，本地仓库的默认位置：Default: ${user.home}/.m2/repository</p></li></ol><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/4maven1.png" alt="maven"></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/4maven2.png" alt="maven"></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/4maven3.png" alt="maven"></p><h4 id="5">五、在idea中查看maven、冲突依赖、与修改pom.xml文件</h4><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/5maven1.png" alt="maven"></p><p><img src="/uploads/IDEA%E6%90%AD%E5%BB%BAMaven%E7%8E%AF%E5%A2%83/5maven2.png" alt="maven"></p><h4 id="6">六、maven的基本命令</h4><pre><code>mvn package 生成target目录，编译、测试代码，生成测试报告，生成jar/war文件mvn compile 编译mvn test 编译并测试mvn clean 清空生成的文件mvn site 生成项目相关信息的网站 mvn -e 显示详细错误 信息. mvn validate 验证工程是否正确，所有需要的资源是否可用。mvn test compile 编译项目测试代码。mvn test install 部署</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IDEA搭建Maven环境&quot;&gt;&lt;a href=&quot;#IDEA搭建Maven环境&quot; class=&quot;headerlink&quot; title=&quot;IDEA搭建Maven环境&quot;&gt;&lt;/a&gt;IDEA搭建Maven环境&lt;/h2&gt;&lt;p&gt;本教程将介绍如何使用Maven在intellijID
      
    
    </summary>
    
      <category term="Maven" scheme="http://yoursite.com/categories/Maven/"/>
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
</feed>
